// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
#endif

#import <XZKit/XZKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="XZKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS_NAMED("Button")
@interface XZNavigationBarButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface XZNavigationBarButton (SWIFT_EXTENSION(XZKit))
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
@property (nonatomic) UIEdgeInsets titleEdgeInsets;
@property (nonatomic) UIEdgeInsets imageEdgeInsets;
@end


/// CacheManager 实现了一些将数据保存到 User Caches 目录的基本操作。
SWIFT_CLASS_NAMED("CacheManager")
@interface XZCacheManager : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@class UICollectionView;
@class XZCollectionViewFlowLayout;
enum XZCollectionViewFlowLayoutLineAlignment : NSInteger;
enum XZCollectionViewFlowLayoutInteritemAlignment : NSInteger;

/// CollectionViewFlowLayout 的代理协议，用于自定义每个 Section 的对齐方式。
SWIFT_PROTOCOL_NAMED("CollectionViewDelegateFlowLayout")
@protocol XZCollectionViewDelegateFlowLayout <UICollectionViewDelegateFlowLayout>
@optional
/// 获取指定 Section 的行对齐方式。
/// \param collectionView The UICollectionView.
///
/// \param collectionViewLayout The CollectionViewFlowLayout.
///
/// \param section 指定的 Section 。
///
///
/// returns:
/// 行对齐方式。
- (enum XZCollectionViewFlowLayoutLineAlignment)collectionView:(UICollectionView * _Nonnull)collectionView layout:(XZCollectionViewFlowLayout * _Nonnull)collectionViewLayout lineAlignmentForSectionAt:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// 获取指定 Section 的元素对齐方式。
/// \param collectionView The UICollectionView.
///
/// \param collectionViewLayout The CollectionViewFlowLayout.
///
/// \param section 指定的 Section 。
///
///
/// returns:
/// 元素对齐方式。
- (enum XZCollectionViewFlowLayoutInteritemAlignment)collectionView:(UICollectionView * _Nonnull)collectionView layout:(XZCollectionViewFlowLayout * _Nonnull)collectionViewLayout interitemAlignmentForSectionAt:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


/// 支持多种对齐方式的 UICollectionView 自定义布局。
/// note:
/// 使用 XZCollectionViewDelegateFlowLayout 作为代理协议，兼容 UICollectionViewDelegateFlowLayout 协议。
/// note:
/// 使用 UICollectionView.delegate 作为代理对象。
/// note:
/// 对于 zIndex 进行了特殊处理，排序越后的视图 zIndex 越大；Header/Footer 的 zIndex 比 Cell 的大。
SWIFT_CLASS_NAMED("CollectionViewFlowLayout")
@interface XZCollectionViewFlowLayout : UICollectionViewLayout
/// 滚动方向。
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
/// 行间距。滚动方向为垂直时，水平方向为一行；滚动方向为水平时，垂直方向为一行。默认 0 ，代理方法的返回值优先。
@property (nonatomic) CGFloat minimumLineSpacing;
/// 内间距。同一行内两个元素之间的距离。默认 0 ，代理方法的返回值优先。
@property (nonatomic) CGFloat minimumInteritemSpacing;
/// 元素大小。默认 (50, 50)，代理方法返回的大小优先。
@property (nonatomic) CGSize itemSize;
/// SectionHeader 大小，默认 0 ，代理方法的返回值优先。
@property (nonatomic) CGSize headerReferenceSize;
/// SectionFooter 大小，默认 0 ，代理方法的返回值优先。
@property (nonatomic) CGSize footerReferenceSize;
/// SectionItem 外边距。不包括 SectionHeader/SectionFooter 。默认 .zero ，代理方法的返回值优先。
@property (nonatomic) UIEdgeInsets sectionInsets;
/// 行对齐方式，默认 .leading ，代理方法的返回值优先。
@property (nonatomic) enum XZCollectionViewFlowLayoutLineAlignment lineAlignment;
/// 元素对齐方式，默认 .median ，代理方法的返回值优先。
@property (nonatomic) enum XZCollectionViewFlowLayoutInteritemAlignment interitemAlignment;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface XZCollectionViewFlowLayout (SWIFT_EXTENSION(XZKit))
@end

/// 所有行的的元素排列对齐方式。
typedef SWIFT_ENUM_NAMED(NSInteger, XZCollectionViewFlowLayoutLineAlignment, "LineAlignment") {
/// 向首端对齐，末端不足留空。
/// note:
/// 首端对齐与布局方向相关，例如 A、B、C 三元素在同一行，自左向右布局 [ A B C _ ]，自右向左则为 [ _ C B A ] 。
  XZCollectionViewFlowLayoutLineAlignmentLeading = 0,
/// 向末端对齐，首端不足留空。
/// note:
/// 末端对齐与布局方向相关，例如 A、B、C 三元素在同一行，自左向右布局 [ _ A B C ]，自右向左则为 [ C B A _ ] 。
  XZCollectionViewFlowLayoutLineAlignmentTrailing = 1,
/// 居中对齐，两端可能留空。
  XZCollectionViewFlowLayoutLineAlignmentCenter = 2,
/// 两端对齐，平均分布，占满整行；如果行只有一个元素，该元素首端对齐。
/// note:
/// 每行的元素间距可能都不一样。
  XZCollectionViewFlowLayoutLineAlignmentJustified = 3,
/// 两端对齐，平均分布，占满整行，如果行只有一个元素，该元素居中对齐。
/// note:
/// 每行的元素间距可能都不一样。
  XZCollectionViewFlowLayoutLineAlignmentJustifiedCenter = 4,
/// 两端对齐，平均分布，占满整行，如果行只有一个元素，该元素末端对齐。
/// note:
/// 每行的元素间距可能都不一样。
  XZCollectionViewFlowLayoutLineAlignmentJustifiedTrailing = 5,
};

/// 同一行元素与元素的对齐方式。
typedef SWIFT_ENUM_NAMED(NSInteger, XZCollectionViewFlowLayoutInteritemAlignment, "InteritemAlignment") {
/// 垂直滚动时，顶部对齐；水平滚动时，布局方向从左到右，左对齐，布局方向从右到左，右对齐。
  XZCollectionViewFlowLayoutInteritemAlignmentAscender = 0,
/// 垂直滚动时，水平中线对齐；水平滚动时，垂直中线对齐。
  XZCollectionViewFlowLayoutInteritemAlignmentMedian = 1,
/// 垂直滚动时，底部对齐；水平滚动时，布局方向从左到右，右对齐，布局方向从右到左，左对齐。
  XZCollectionViewFlowLayoutInteritemAlignmentDescender = 2,
};



@class UICollectionViewLayoutAttributes;

@interface XZCollectionViewFlowLayout (SWIFT_EXTENSION(XZKit))
@property (nonatomic, readonly) CGSize collectionViewContentSize;
- (void)invalidateLayout;
/// 当 UICollectionView 的宽度改变时，需重新计算布局。
/// \param newBounds The collectionView’s new bounds.
///
///
/// returns:
/// true or false.
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
- (void)prepareLayout;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Returns .leftToRight.
@property (nonatomic, readonly) UIUserInterfaceLayoutDirection developmentLayoutDirection;
/// Retruns true.
@property (nonatomic, readonly) BOOL flipsHorizontallyInOppositeLayoutDirection;
@end


/// 包含图片、文字上下显示的触控视图。
SWIFT_CLASS_NAMED("TitledImageControl")
@interface XZTitledImageControl : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// 是否选中。
@property (nonatomic, getter=isSelected) BOOL selected;
/// 是否高亮。
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// 是否可用。
@property (nonatomic, getter=isEnabled) BOOL enabled;
@end


/// 呈现视图内容状态的视图。
SWIFT_CLASS_NAMED("ContentStatusView")
@interface XZContentStatusView : XZTitledImageControl
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("init(coder:) has not been implemented");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



enum XZImageCacheType : NSInteger;
@class UIImage;

/// 图片缓存。
SWIFT_CLASS_NAMED("ImageCacheManager")
@interface XZImageCacheManager : XZCacheManager
/// XZKit 默认的图片缓存。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) XZImageCacheManager * _Nonnull defaultManager;)
+ (XZImageCacheManager * _Nonnull)defaultManager SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)identifierForImageNamed:(NSString * _Nonnull)name type:(enum XZImageCacheType)type scale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)imageNamed:(NSString * _Nonnull)name type:(enum XZImageCacheType)type scale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
- (BOOL)storeImage:(UIImage * _Nullable)image forName:(NSString * _Nonnull)name type:(enum XZImageCacheType)type scale:(CGFloat)scale;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, XZImageCacheType, "ImageType") {
  XZImageCacheTypePNG SWIFT_COMPILE_NAME("png") = 0,
  XZImageCacheTypeJPG SWIFT_COMPILE_NAME("jpg") = 1,
};


/// 交互行为的管理者。InteractiveManager 接管并中转了 NavigationController 的代理方法。
/// <ul>
///   <li>
///     当代理方法返回了转场控制器时，AnimationManager 不处理。
///   </li>
///   <li>
///     当手势触发了一个转场时，AnimationManager 根据手势行为创建一个可交互的转场控制器处理转场动画。
///   </li>
///   <li>
///     其它转场，AnimationManager 创建一个不可交互的转场控制器。
///   </li>
///   <li>
///     每次转场都创建新的转场控制器。
///   </li>
///   <li>
///     此对象初始化时，会调用导航控制器的 view 。
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("InteractiveManager")
@interface XZNavigationControllerInteractiveManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@class UINavigationController;
@class UIViewController;
@protocol UIViewControllerAnimatedTransitioning;
@protocol UIViewControllerInteractiveTransitioning;

@interface XZNavigationControllerInteractiveManager (SWIFT_EXTENSION(XZKit)) <UINavigationControllerDelegate>
/// 获取转场动画控制器。
- (id <UIViewControllerAnimatedTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController animationControllerForOperation:(UINavigationControllerOperation)operation fromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC SWIFT_WARN_UNUSED_RESULT;
/// 新的控制器将要显示。
- (void)navigationController:(UINavigationController * _Nonnull)navigationController willShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
/// 导航控制器显示了指定的控制器。
/// 转场取消的时候，此方法不会调用。
- (void)navigationController:(UINavigationController * _Nonnull)navigationController didShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
/// 动画控制器的交互控制器。
- (id <UIViewControllerInteractiveTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController interactionControllerForAnimationController:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animationController SWIFT_WARN_UNUSED_RESULT;
/// 支持的屏幕方向
- (UIInterfaceOrientationMask)navigationControllerSupportedInterfaceOrientations:(UINavigationController * _Nonnull)navigationController SWIFT_WARN_UNUSED_RESULT;
/// 模态控制器的屏幕方向。
- (UIInterfaceOrientation)navigationControllerPreferredInterfaceOrientationForPresentation:(UINavigationController * _Nonnull)navigationController SWIFT_WARN_UNUSED_RESULT;
@end

@class UIGestureRecognizer;

@interface XZNavigationControllerInteractiveManager (SWIFT_EXTENSION(XZKit)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// 是否可以与其它手势同时被识别。
/// note:
/// 如果站内控制器限定了导航驱动的边缘范围，则在该边缘范围内，导航驱动手势，可以与其它手势同时被识别，例如在 ScrollView 滚动手势，不会屏蔽导航行为。
/// note:
/// 如果没有限定手势驱动的边缘范围，那么在存在 ScrollView 时，默认仅在左右边缘 8pt 内可以触发导航手势，其它范围只能识别 ScrollView 滚动手势。
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// 导航驱动手势，是否需要在其它手势失败时才能识别，默认 false 。
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// 导航驱动手势被识别时，其它手势是否需要导航驱动手势失败才能进行。
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(XZKit))
/// 格式化日期。
/// \param date 日期。
///
/// \param format 日期格式。
///
- (nonnull instancetype)xz_stringWithDate:(NSDate * _Nonnull)date format:(NSString * _Nonnull)format SWIFT_METHOD_FAMILY(init);
@end


/// 为 NavigationBarCustomizable 协议控制器自定义导航条提供的基类。
/// note:
/// 推荐使用 UINavigationController.setNavigationBarHidden(_:animated:) 方法控制 isHidden 属性。
SWIFT_CLASS("_TtC5XZKit13NavigationBar")
@interface NavigationBar : UIView
/// 初始化。
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// 导航条将按照当前视图布局方向布局 titleView、infoView、backView、shadowImageView、backgroundImageView 。
- (void)layoutSubviews;
/// 状态栏发生改变的通知事件。
- (void)applicationDidChangeStatusBarFrame:(NSNotification * _Nonnull)notification;
@end


@class NSBundle;

/// NavigationController 提供了 全屏手势 和 自定义导航条 的功能。
/// note:
/// 当栈内控制器支持自定义时，系统自带导航条将不可见（非隐藏）。
/// note:
/// 当控制器专场时，自动根据控制器自定义导航条状态，设置系统导航条状态。
SWIFT_CLASS_NAMED("NavigationController")
@interface XZNavigationController : UINavigationController
/// 是否允许站内控制器通过手势进行导航，默认 true 。
/// note:
/// 此属性为 true 时，栈内所有控制器都支持全屏手势返回。
/// note:
/// 控制手势导航行为，控制器需实现 NavigationGestureDrivable 协议。
@property (nonatomic) BOOL xz_isNavigationGestureDrivable;
/// 是否允许站内控制器使用自定义导航栏，默认 false 。
@property (nonatomic) BOOL xz_isNavigationBarCustomizable;
/// 当前导航控制器的代理已经由 animationManager 来处理。
/// note:
/// 设置该属性等同于设置 animationManager.delegate 属性。
/// note:
/// 该属性值始终为 animationManager 。
@property (nonatomic, strong) id <UINavigationControllerDelegate> _Nullable delegate;
/// 始终返回 nil 。
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nullable interactivePopGestureRecognizer;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)setNavigationBarHidden:(BOOL)hidden animated:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@interface XZNavigationController (SWIFT_EXTENSION(XZKit))
@end

@class UIColor;

/// ProgressView 用于展示进度的环形视图。
SWIFT_CLASS("_TtC5XZKit12ProgressView")
@interface ProgressView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// 当进度条为环形时，tintColor 影响中央区域的背景色。
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)drawRect:(CGRect)rect;
@end




/// 时间计数器。根据指定时间间隔累计计时，并且每次计时都将触发回调。
SWIFT_CLASS_NAMED("TimeCounter")
@interface XZTimeCounter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("TimeCounterDelegate")
@protocol XZTimeCounterDelegate <NSObject>
/// 计数器每次更新了计时时长都会调用此方法。
/// \param timeCounter 调用此代理方法的 Counter 对象。
///
/// \param interval 计数器从上次计数到本次计数的时间间隔。
///
- (void)timeCounter:(XZTimeCounter * _Nonnull)timeCounter didCountWith:(NSTimeInterval)interval;
@end


/// 倒计时视图，在指定时间内完成进度从 1.0 到 0 的变化。
/// <ul>
///   <li>
///     当倒计时完成时，会发送 valueChanged 事件。
///   </li>
/// </ul>
SWIFT_CLASS("_TtC5XZKit12TimerControl")
@interface TimerControl : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface TimerControl (SWIFT_EXTENSION(XZKit)) <XZTimeCounterDelegate>
- (void)timeCounter:(XZTimeCounter * _Nonnull)timeCounter didCountWith:(NSTimeInterval)interval;
@end





/// 一个图片、文字上下布局的视图，可以自定义图片文字边距。
SWIFT_CLASS_NAMED("TitledImageView")
@interface XZTitledImageView : UIView
- (void)layoutSubviews;
/// 在自动布局模式下，支持自动计算自身大小。
/// note:
/// 文字以单行显示。
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// 该方法返回当前图片以及文字内容适配指定大小所需的视图大小。
/// \param size 被适配的视图大小，该参数未使用。
///
///
/// returns:
/// 视图的所需的大小。
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end






@interface UIApplication (SWIFT_EXTENSION(XZKit))
/// App 启动图，屏幕当前方向的启动图。
/// <ul>
///   <li>
///     如果当前无法获取屏幕方向，默认使用竖屏方向。
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) UIImage * _Nullable xz_launchImage;
@end




@interface UIImageView (SWIFT_EXTENSION(XZKit))
/// 占位图。
@property (nonatomic, strong) UIImage * _Nullable xz_placeholder;
/// 高亮状态下的占位图。
@property (nonatomic, strong) UIImage * _Nullable highlightedPlaceholder;
/// 动态占位图。
@property (nonatomic, copy) NSArray<UIImage *> * _Nullable xz_animationPlaceholder;
/// 高亮状态下的动态占位图。
@property (nonatomic, copy) NSArray<UIImage *> * _Nullable xz_highlightedAnimationPlaceholder;
/// 显示占位图的视图。
/// note:
/// 占位图视图在首次加载时会同步当前 UIImageView 的 backgroundColor、contentMode、alpha、isHighlighted 的属性值。
/// note:
/// 占位图视图添加到视图上时，将自己放在当前视图子视图的底部。
@property (nonatomic, readonly, strong) UIImageView * _Nonnull xz_placeholderImageView;
/// 获取已创建的占位图视图。
@property (nonatomic, readonly, strong) UIImageView * _Nullable xz_placeholderImageViewIfLoaded;
@end


SWIFT_CLASS("_TtC5XZKit31UIImageViewPlaceholderImageView")
@interface UIImageViewPlaceholderImageView : UIImageView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)didMoveToSuperview;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface UINavigationBar (SWIFT_EXTENSION(XZKit))
/// NavigationController 控制系统导航条的外观显示。
/// <ul>
///   <li>
///     当此属性为 true 时，系统导航条为不可见状态，其 isHidden、isTranslucent 属性不能改变其可见性，从而展示栈控制器自定义的导航条。
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL xz_isCustomizable;
@end


@interface UINavigationController (SWIFT_EXTENSION(XZKit))
/// 获取当前导航控制器显示指定自定义导航条时，自定义导航条（当前状态下）的 frame 。
/// \param navigationBar 自定义导航条。
///
///
/// returns:
/// 自定义导航条 frame 。
- (CGRect)xz_frameForNavigationBar:(NavigationBar * _Nullable)navigationBar SWIFT_WARN_UNUSED_RESULT;
/// 自定义导航条在指定状态下的 frame 。
/// \param isHidden 导航条是否隐藏。
///
///
/// returns:
/// 自定义导航条 frame 。
- (CGRect)xz_frameForNavigationBarHidden:(BOOL)isHidden SWIFT_WARN_UNUSED_RESULT;
@end


@interface UINavigationController (SWIFT_EXTENSION(XZKit))
/// 是否可以通过手势驱动栈内控制器的导航行为。
/// <ul>
///   <li>
///     默认 false 。
///   </li>
///   <li>
///     必须是 XZKit.NavigationController 设置此属性才会生效。
///   </li>
///   <li>
///     一旦设置此属性为 true ，栈内控制器将全部支持 screen 手势返回。
///   </li>
///   <li>
///     栈控制器可通过 NavigationGestureDrivable 协议实现限制导航手势的行为。
///   </li>
/// </ul>
@property (nonatomic) BOOL xz_isNavigationGestureDrivable;
/// 栈内控制器是否可以自定义导航条。
/// <ul>
///   <li>
///     默认 false 。
///   </li>
///   <li>
///     必须是 XZKit.NavigationController 设置此属性才会生效。
///   </li>
///   <li>
///     属性为 true 时，默认导航控制器没有导航条。
///   </li>
///   <li>
///     栈控制器自定义导航条，必须实现 NavigationBarCustomizable 协议。
///   </li>
/// </ul>
@property (nonatomic) BOOL xz_isNavigationBarCustomizable;
@end


@interface UITabBar (SWIFT_EXTENSION(XZKit))
/// 属性 isFrameMutable 是否可用。
/// <ul>
///   <li>
///     系统控件此属性返回 false 。
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL xz_isFrameMutationControllable;
/// 此属性用以标识 frame 属性是否可以修改。
/// <ul>
///   <li>
///     此属性是为了解决系统导航控制器自定了转场动画后，TabBar 的动画效果不能适配不同布局方向的问题。
///   </li>
///   <li>
///     当对象的此设置此属性为 false 时，XZKit 将以当前对象的类作为父类，派生出新的类，并将当前对象的类修改为新类。
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL xz_isFrameMutable;
@end


@interface UIView (SWIFT_EXTENSION(XZKit))
/// 当前视图的布局方向。
/// <ul>
///   <li>
///     默认返回 UIApplication.shared.userInterfaceLayoutDirection
///   </li>
///   <li>
///     iOS 9 以上返回视图调用 UIView.userInterfaceLayoutDirection(for:) 方法。
///   </li>
///   <li>
///     iOS 10 以上返回视图 effectiveUserInterfaceLayoutDirection 属性。
///   </li>
/// </ul>
@property (nonatomic, readonly) UIUserInterfaceLayoutDirection xz_userInterfaceLayoutDirection;
/// XZKit 通过在视图上添加 <code>BrightnessView</code> 来实现改变视图的亮度。
/// <ul>
///   <li>
///     BrightnessView 为黑色背景，其 alpha = 1.0 - brightness 。
///   </li>
///   <li>
///     取值范围 0 ~ 1.0 ，其它范围的值无效。
///   </li>
/// </ul>
@property (nonatomic) CGFloat xz_brightness;
/// 获取控制明亮度的视图，如果已创建的话。
@property (nonatomic, readonly, strong) UIView * _Nullable xz_brightnessViewIfLoaded;
/// 控制视图明亮度的视图。
/// note:
/// 一般情况下，需保持亮度视图在所有子视图顶部。
@property (nonatomic, readonly, strong) UIView * _Nonnull xz_brightnessView;
@end


@interface UIViewController (SWIFT_EXTENSION(XZKit))
/// 获取根视图的布局方向。
/// note:
/// 因为此属性会获取根视图，所以可能会造成控制器生命周期提前。
@property (nonatomic, readonly) UIUserInterfaceLayoutDirection xz_userInterfaceLayoutDirection;
@end


@interface UIWebView (SWIFT_EXTENSION(XZKit))
/// 设置 UIWebView 的 User-Agent ，对于已创建的对象，该设置可能不会生效。
/// note:
/// 一般情况下，建议在 AppDelegate 中处理。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull xz_userAgent;)
+ (NSString * _Nonnull)xz_userAgent SWIFT_WARN_UNUSED_RESULT;
+ (void)setXz_userAgent:(NSString * _Nonnull)newValue;
@end


/// UIView 亮度遮罩。
SWIFT_CLASS("_TtC5XZKit20XZViewBrightnessView")
@interface XZViewBrightnessView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, getter=isUserInteractionEnabled) BOOL userInteractionEnabled;
@property (nonatomic, getter=isOpaque) BOOL opaque;
@property (nonatomic) UIViewAutoresizing autoresizingMask;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
